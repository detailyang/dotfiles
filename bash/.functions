#! /usr/bin/env bash

function sb() {
    export FZF_DEFAULT_COMMAND="fd --type f"
    export FZF_DEFAULT_OPTS="--reverse --inline-info \--bind \'ctrl-y:execute-silent(readlink -f {} | cat {} | pbcopy)+abort\' --header \'Press CTRL-Y to copy file content into clipboard\'"
    export SHELL=/bin/bash
    fd . "$HOME/snippet" --type f | fzf  --preview='bat --color always {}'
}

function rpmbuild-here() {
    rpmbuild --define "_topdir $(cd .. ; pwd)" $@
}

function rpmbuild-bootstrap() {
    mkdir -p BUILD BUILDROOT SOURCE SPECS SRPMS
}

function gitworkname() {
    if [[ -f "$HOME/.gitworkname" ]]; then
        topdir=$(git rev-parse --show-toplevel 2>/dev/null)
        if [[ "$topdir" == "" ]]; then
            echo "error: not git repo"
            exit 1
        fi

        echo -e "append \n$(cat $HOME/.gitworkname)\nto ${topdir}/.git/config"
        cat "$HOME/.gitworkname" >> "${topdir}/.git/config"
    else
        echo "no ~/.gitworkname found"
    fi
}

function ii() {
    PASS=($(cat $HOME/.ihosts | sort| awk -F '|' '{print $5}'))
    IHOSTS=`cat $HOME/.ihosts | sort | awk -F '|' '{print $1"|"$2"|"$3"|"$4"|******"}'`
    SSHPASS="sshpass"
    SSH="ssh -A -o ConnectTimeout=3 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

    select line in $IHOSTS ; do
        i=$(( $REPLY - 1))
        pass=${PASS[$i]}
        IFS='|' read -r host user ip port _pass <<< "$line"
        $SSHPASS -p "$pass" $SSH -p $port "$user@$ip"
    done
}

function i() {
    HOSTS=`cat $HOME/.hosts | sort`
    SSH="ssh -A -o ConnectTimeout=3 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

    select line in $HOSTS ; do
        IFS='|' read -r host user ip port file <<< "$line"
        echo "$SSH -i $file -p $port $user@$ip"
        $SSH -i $file -p $port "$user@$ip"
    done
}

function k() {
    CLUSTERS=$(cat $HOME/.k8s | sort)
    select cluster in $CLUSTERS; do
       IFS='|' read -r name config <<< "$cluster"
       export KUBENAME=$name
       export KUBECONFIG=$config

       if which fish &> /dev/null; then
           exec fish
       fi

       if which zsh &> /dev/null; then
           exec zsh
       fi

       if which bash &> /dev/null; then
           exec bash
       fi

       if which pbcopy &> /dev/null; then
           echo "export KUBECONFIG=$config" | pbcopy
       fi
       exit
    done
}

function tunoff() {
    sudo kextunload -b net.sf.tuntaposx.tun
}

function cscope-build {
    cscope -bqR
}

function cscope-go {
    cscope -dq
}

function chrome() {
    open "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
}

function chrome-canary() {
    open "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"
}

function chromium() {
    open "/Applications/Chromium.app/Contents/MacOS/Chromium"
}

function mac-key-repeat() {
    defaults write -g ApplePressAndHoldEnabled -bool false
}


